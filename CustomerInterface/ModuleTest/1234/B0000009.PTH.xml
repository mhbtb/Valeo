<?xml version="1.0" encoding="UTF-8"?>
<basis_paths xml_basis_paths_version="1.0" basis_paths="TRUE" edg="Y" checksum="1458606154" handle_ternary="Y" handle_nested_ternary="Y" cover_declarations="N" cover_headers="N" basis_paths_for_constant_branches="Y">
  <subprogram index="1" name="GetLeWWS" canonical="" mangled="GetLeWWS" class_member="FALSE" testable="TRUE" complexity="33">
    <listing_start>187</listing_start>
    <listing_end>412</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="30">
          <text>
            <line>(30) if (rb_LSPotiStage_g &gt; 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set rb_LSPotiStage_g due to assignment
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="30">
          <text>
            <line>(30) if (rb_LSPotiStage_g &gt; 7) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set rb_LSPotiStage_g due to assignment
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="24">
          <text>
            <line>(24) if ((uF_SCIFlags_mg.Bit).B4 == 0 || (uF_ASIC_ControlFlags_g.Bit).B4 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="26">
          <text>
            <line>(26) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0 || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="27">
          <text>
            <line>(27) if (rb_WakeupCounter_mg == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WakeupCounter_mg:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="24">
          <text>
            <line>(24) if ((uF_SCIFlags_mg.Bit).B4 == 0 || (uF_ASIC_ControlFlags_g.Bit).B4 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="26">
          <text>
            <line>(26) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0 || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="27">
          <text>
            <line>(27) if (rb_WakeupCounter_mg == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WakeupCounter_mg:0
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="24">
          <text>
            <line>(24) if ((uF_SCIFlags_mg.Bit).B4 == 0 || (uF_ASIC_ControlFlags_g.Bit).B4 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="26">
          <text>
            <line>(26) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0 || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MAX&gt;&gt;
-- Values at different branches: (1)-&gt;not equal to 0, not equal to 1 (26)-&gt; 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
</script>
      <notes>      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1 'equal to' and 'not equal to' same value in branches 1/26
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="10">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="24">
          <text>
            <line>(24) if ((uF_SCIFlags_mg.Bit).B4 == 0 || (uF_ASIC_ControlFlags_g.Bit).B4 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="25">
          <text>
            <line>(25) if (((uF_VoltageStatus_g.Bit).B2 == 0 &amp;&amp; (rb_Verglasun_offenDebounce_mg &gt; 100 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x4) &gt; 0 == 1)) &amp;&amp; (uF_SCIFlags_mg.Bit).B4 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_offenDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="11">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="24">
          <text>
            <line>(24) if ((uF_SCIFlags_mg.Bit).B4 == 0 || (uF_ASIC_ControlFlags_g.Bit).B4 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="25">
          <text>
            <line>(25) if (((uF_VoltageStatus_g.Bit).B2 == 0 &amp;&amp; (rb_Verglasun_offenDebounce_mg &gt; 100 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x4) &gt; 0 == 1)) &amp;&amp; (uF_SCIFlags_mg.Bit).B4 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_offenDebounce_mg:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 25
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="12">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="13">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="14">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_IgnitionOndelay_mg &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0 == 0 &amp;&amp; rb_AfterResetCounter_l &gt; 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="20">
          <text>
            <line>(20) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:5
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 18
      Cannot set local variable rb_AfterResetCounter_l in branch 18
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set rw_IgnitionOffDelay_mg due to assignment
</notes>
    </test_path>
    <test_path index="15">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_IgnitionOndelay_mg &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0 == 0 &amp;&amp; rb_AfterResetCounter_l &gt; 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="20">
          <text>
            <line>(20) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="21">
          <text>
            <line>(21) if (rb_IntervalOnOndelay_mg &gt; 15) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:5
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 18
      Cannot set local variable rb_AfterResetCounter_l in branch 18
      Cannot set local variable rb_IntervalOnOndelay_mg in branch 21
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set rw_IgnitionOffDelay_mg due to assignment
</notes>
    </test_path>
    <test_path index="16">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_IgnitionOndelay_mg &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0 == 0 &amp;&amp; rb_AfterResetCounter_l &gt; 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="20">
          <text>
            <line>(20) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="21">
          <text>
            <line>(21) if (rb_IntervalOnOndelay_mg &gt; 15) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:5
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 18
      Cannot set local variable rb_AfterResetCounter_l in branch 18
      Cannot set local variable rb_IntervalOnOndelay_mg in branch 21
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set rw_IgnitionOffDelay_mg due to assignment
</notes>
    </test_path>
    <test_path index="17">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_IgnitionOndelay_mg &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0 == 0 &amp;&amp; rb_AfterResetCounter_l &gt; 10) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="19">
          <text>
            <line>(19) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).RainSensActvn_CEM_LIN1 == 1 &amp;&amp; (CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1 || ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x40) &gt; 0 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="20">
          <text>
            <line>(20) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:5
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.RainSensActvn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 18
      Cannot set local variable rb_AfterResetCounter_l in branch 18
      Conflict: Unable to validate expression-to-expression comparison in branch 19
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set rw_IgnitionOffDelay_mg due to assignment
</notes>
    </test_path>
    <test_path index="18">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_IgnitionOndelay_mg &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0 == 0 &amp;&amp; rb_AfterResetCounter_l &gt; 10) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="19">
          <text>
            <line>(19) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).RainSensActvn_CEM_LIN1 == 1 &amp;&amp; (CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1 || ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x40) &gt; 0 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="20">
          <text>
            <line>(20) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:5
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.RainSensActvn_CEM_LIN1:1
-- Values at different branches: (19)-&gt; 1 (20)-&gt;not equal to 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 18
      Cannot set local variable rb_AfterResetCounter_l in branch 18
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 'equal to' and 'not equal to' same value in branches 19/20
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set rw_IgnitionOffDelay_mg due to assignment
</notes>
    </test_path>
    <test_path index="19">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_IgnitionOndelay_mg &lt; 250) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0 == 0 &amp;&amp; rb_AfterResetCounter_l &gt; 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="20">
          <text>
            <line>(20) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:5
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 18
      Cannot set local variable rb_AfterResetCounter_l in branch 18
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set rw_IgnitionOffDelay_mg due to assignment
</notes>
    </test_path>
    <test_path index="20">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
-- Values at different branches: (15)-&gt;greater than or equal to 10 (16)-&gt;less than or equal to 4
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_KL15_mg due to assignment
      Conflict: Cannot resolve multiple comparisons ( G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1 ) in branches 15/16
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="21">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).VehSpdForWipg_CEM_LIN1 == 0xff) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if (rb_KL15_mg == 1 || rb_speed_in_kmh_g &gt; 4) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="22">
          <text>
            <line>(22) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotIntlCmd_CEM_LIN1 &gt;= 7) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.VehSpdForWipg_CEM_LIN1:255
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotIntlCmd_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_speed_in_kmh_g due to assignment
      Cannot set rb_KL15_mg due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="22">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if ((uF_StatusRainsensor_mg.Bit).B7 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="23">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if ((uF_StatusRainsensor_mg.Bit).B7 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="24">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="25">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="26">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="27">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="28">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="29">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_Verglasun_ClosedDebounce_mg &lt; 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="30">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_Verglasun_ClosedDebounce_mg &lt; 0xff) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="31">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_VoltageStatus_g.Bit).B2 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="32">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_VoltageStatus_g.Bit).B2 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Verglasun_offenDebounce_mg &lt; 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_offenDebounce_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
    <test_path index="33">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1).EnaOfflineMonitor_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_VoltageStatus_g.Bit).B2 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Verglasun_offenDebounce_mg &lt; 0xff) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinIndicationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (((uLinIndicationFlags.w)[0]).b4 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uLinIndicationFlags.w)[0]).b3 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (((uLinIndicationFlags.w)[0]).b2 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (((uLinIndicationFlags.w)[0]).b1 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if (((uLinIndicationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="23">
          <text>
            <line>(23) if (rw_NoCommunicationCounter_g &gt; ((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="28">
          <text>
            <line>(28) if (rw_NoCommunicationCounter_g &gt;= (((EEPROM_Struct_AD.EEPROMStructAD).p_t_autobahn_delay_on_g &gt;&gt; 5 &amp; 0x7) * 100 + 200) - 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="29">
          <text>
            <line>(29) if ((cab_PotistageMapping_mg)[((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x38) &gt;&gt; 3] + rb_Empfindlichkeit_LS_l &gt; 3) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="31">
          <text>
            <line>(31) if (rb_AfterResetCounter_l &lt; 250) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="32">
          <text>
            <line>(32) if (rw_IgnitionOffDelay_mg &lt; (1000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr05_CEM_LIN1.cemcem_lin1fr05_cem_lin1.EnaOfflineMonitor_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_offenDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b3:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinIndicationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_NoCommunicationCounter_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_NoCommunicationCounter_g due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 29
      Cannot set local variable rb_AfterResetCounter_l in branch 31
      Cannot set local variable rw_IgnitionOffDelay_mg in branch 32
</notes>
    </test_path>
  </subprogram>
  <subprogram index="2" name="GetLsWWS" canonical="" mangled="GetLsWWS" class_member="FALSE" testable="TRUE" complexity="13">
    <listing_start>427</listing_start>
    <listing_end>504</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if (rb_parkpositioncounter_s &gt; 7) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 12
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if (rb_parkpositioncounter_s &gt; 7) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:2
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 12
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rb_parkpositioncounter_s &lt; 255) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rub_IntermDelayTime &gt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_IntermDelayTime:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 10
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rb_parkpositioncounter_s &lt; 255) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rub_IntermDelayTime &gt; 5) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_IntermDelayTime:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 10
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rb_parkpositioncounter_s &lt; 255) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rub_IntermDelayTime &gt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_IntermDelayTime:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 10
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rub_IntermDelayTime &gt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_IntermDelayTime:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if (rb_parkpositioncounter_s &gt; 7) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:0
-- Values at different branches: (1)-&gt;less than or equal to 0 (7)-&gt;greater than 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g 'less than' and 'greater than' same value in branches 1/7
      Cannot set local variable rb_parkpositioncounter_s in branch 12
</notes>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_WiperSpeed_g &gt; 0 || (uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_parkpositioncounter_s &gt; (cab_WiperMotorRunntime_mg)[rb_WiperSpeed_g]) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 6
      Cannot set const variable TEST.VALUE:      Cannot set local variable cab_WiperMotorRunntime_mg in branch 6
[0]:
</notes>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_WiperSpeed_g &gt; 0 || (uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_parkpositioncounter_s &gt; (cab_WiperMotorRunntime_mg)[rb_WiperSpeed_g]) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 6
      Cannot set const variable TEST.VALUE:      Cannot set local variable cab_WiperMotorRunntime_mg in branch 6
[0]:
</notes>
    </test_path>
    <test_path index="10">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_WiperSpeed_g &gt; 0 || (uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_parkpositioncounter_s &gt; 10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_parkpositioncounter_s &gt; (cab_WiperMotorRunntime_mg)[rb_WiperSpeed_g]) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 5
      Cannot set rb_parkpositioncounter_s due to assignment
      Cannot set const variable TEST.VALUE:      Cannot set local variable cab_WiperMotorRunntime_mg in branch 6
[0]:
</notes>
    </test_path>
    <test_path index="11">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_WiperSpeed_g &gt; 0 || (uF_StatusRainsensor_mg.Bit).B7 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_parkpositioncounter_s &gt; 10) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_parkpositioncounter_s &gt; (cab_WiperMotorRunntime_mg)[rb_WiperSpeed_g]) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
</script>
      <notes>      Cannot set local variable rb_parkpositioncounter_s in branch 5
      Cannot set rb_parkpositioncounter_s due to assignment
      Cannot set const variable TEST.VALUE:      Cannot set local variable cab_WiperMotorRunntime_mg in branch 6
[0]:
</notes>
    </test_path>
    <test_path index="12">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rw_WipeCommandTimOut_mg &lt;= (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if (rb_parkpositioncounter_s &gt; 7) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
-- Values at different branches: (2)-&gt;greater than 400 (3)-&gt;less than or equal to 400
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MAX&gt;&gt;
-- Values at different branches: (1)-&gt;greater than 0 (7)-&gt;less than or equal to 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MAX&gt;&gt;
-- Values at different branches: (1)-&gt; 1 (3)-&gt;not equal to 1
-- Values at different branches: (1)-&gt; 1 (8)-&gt;not equal to 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
</script>
      <notes>      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg 'less than' and 'greater than' same value in branches 2/3
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g 'less than' and 'greater than' same value in branches 1/7
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6 'equal to' and 'not equal to' same value in branches 1/3
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6 'equal to' and 'not equal to' same value in branches 1/8
      Cannot set local variable rb_parkpositioncounter_s in branch 12
</notes>
    </test_path>
    <test_path index="13">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_WiperSpeed_g &gt; 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rw_WipeCommandTimOut_mg &lt;= (400)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 0 &amp;&amp; (uF_SCIFlags_mg.Bit).B6 == 1 || rw_WipeCommandTimOut_mg &gt; (400)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_SCIFlags_mg.Bit).B6 == 0 &amp;&amp; rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((uF_SCIFlags_mg.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if (rb_parkpositioncounter_s &gt; 7) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_WipeCommandTimOut_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
-- Values at different branches: (1)-&gt;greater than 0 (7)-&gt;less than or equal to 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MAX&gt;&gt;
-- Values at different branches: (1)-&gt; 1 (3)-&gt;not equal to 1
-- Values at different branches: (1)-&gt; 1 (8)-&gt;not equal to 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
</script>
      <notes>      Cannot set rw_WipeCommandTimOut_mg due to assignment
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g 'less than' and 'greater than' same value in branches 1/7
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6 'equal to' and 'not equal to' same value in branches 1/3
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6 'equal to' and 'not equal to' same value in branches 1/8
      Cannot set local variable rb_parkpositioncounter_s in branch 12
</notes>
    </test_path>
  </subprogram>
  <subprogram index="3" name="CopyRLSData" canonical="" mangled="CopyRLSData" class_member="FALSE" testable="TRUE" complexity="9">
    <listing_start>519</listing_start>
    <listing_end>579</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (0 == ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x1) &amp;&amp; 0 == ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:1
</script>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (0 == ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x1) &amp;&amp; 0 == ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:0
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((uLinConfirmationFlags.w)[0]).b10 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (((uLinConfirmationFlags.w)[0]).b9 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (((uLinConfirmationFlags.w)[0]).b8 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uLinConfirmationFlags.w)[0]).b7 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((uLinConfirmationFlags.w)[0]).b6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((uLinConfirmationFlags.w)[0]).b5 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (0 == (uF_Main_Flags_g.Bit).B6) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b10:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b9:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b8:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uLinConfirmationFlags.w[0].b5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
  </subprogram>
  <subprogram index="4" name="RainFunction" canonical="" mangled="RainFunction" class_member="FALSE" testable="TRUE" complexity="19">
    <listing_start>589</listing_start>
    <listing_end>728</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (rb_WiperSpeedAlt_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeedAlt_g:1
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="18">
          <text>
            <line>(18) if (rb_WiperSpeedAlt_g == 0) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeedAlt_g:0
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if (rb_WiperSpeed_g != 0 &amp;&amp; rb_WipeWorkStatus_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WipeWorkStatus_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if (rb_WiperSpeed_g != 0 &amp;&amp; rb_WipeWorkStatus_mg == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if ((RSStatus.Bit).B5 == 0 &amp;&amp; (RSStatus.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WipeWorkStatus_mg:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RSStatus.Bit.B5:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RSStatus.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) if (rb_WiperSpeed_g != 0 &amp;&amp; rb_WipeWorkStatus_mg == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="15">
          <text>
            <line>(15) if ((RSStatus.Bit).B5 == 0 &amp;&amp; (RSStatus.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WipeWorkStatus_mg:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RSStatus.Bit.B5:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RSStatus.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if ((uF_StatusRainsensor_mg.Bit).B7 == 0 || rb_TunnelWipeTimeOut_mg &gt;= 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
      Cannot set local variable rb_TunnelWipeTimeOut_mg in branch 11
</notes>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if ((uF_StatusRainsensor_mg.Bit).B7 == 0 || rb_TunnelWipeTimeOut_mg &gt;= 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
      Cannot set local variable rb_TunnelWipeTimeOut_mg in branch 11
</notes>
    </test_path>
    <test_path index="10">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if ((uF_StatusRainsensor_mg.Bit).B7 == 0 || rb_TunnelWipeTimeOut_mg &gt;= 50) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_StatusRainsensor_mg.Bit.B7:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
      Cannot set local variable rb_TunnelWipeTimeOut_mg in branch 11
</notes>
    </test_path>
    <test_path index="11">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
      Cannot set local variable rw_tunnelWischVerzoegerung_l in branch 6
</notes>
    </test_path>
    <test_path index="12">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
      Cannot set local variable rw_tunnelWischVerzoegerung_l in branch 6
</notes>
    </test_path>
    <test_path index="13">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Communication_mg.Bit).B4 == 0 &amp;&amp; rw_AfterRSWipeCounter_mg &lt; rw_tunnelWischAktivierung_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:255
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_tunnelWipeActive_g in branch 8
      Cannot set local variable rw_tunnelWischVerzoegerung_l in branch 6
</notes>
    </test_path>
    <test_path index="14">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Communication_mg.Bit).B4 == 0 &amp;&amp; rw_AfterRSWipeCounter_mg &lt; rw_tunnelWischAktivierung_l) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:255
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B4:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
      Cannot set local variable rw_tunnelWischVerzoegerung_l in branch 6
</notes>
    </test_path>
    <test_path index="15">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="16">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="17">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_OutOffParkCounter_mg &gt; 18) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_OutOffParkCounter_mg in branch 3
      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="18">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_OutOffParkCounter_mg &gt; 18) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounter_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_OutOffParkCounter_mg in branch 3
      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
    <test_path index="19">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_IgnitionOndelay_mg &lt; 50) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_AfterWWSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_AfterRSWipeCounter_mg &lt; (50000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rw_AfterRSWipeCounterAlt_mg &lt;= rw_tunnelWischVerzoegerung_l &amp;&amp; rb_speed_in_kmh_g &gt; 29) &amp;&amp; (uF_modi_lightsens_g.Bit).B2 == 1) &amp;&amp; rub_RSIntermDelayInit == 0xff) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_AfterRSWipeCounter_mg &gt;= rw_AfterRSWipeCounterAlt_mg &amp;&amp; rb_tunnelWipeActive_g == 1) &amp;&amp; rb_WiperSpeed_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if ((uF_Communication_mg.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) if ((CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1).WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="16">
          <text>
            <line>(16) if ((CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1).WshngCycActv_CEM_LIN1 != 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="17">
          <text>
            <line>(17) if (rb_WiperSpeed_g &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_IgnitionOndelay_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterWWSWipeCounter_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_AfterRSWipeCounterAlt_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rub_RSIntermDelayInit:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Communication_mg.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr01_CEM_LIN1.cemcem_lin1fr01_cem_lin1.WiprMotFrntLvrCmdSafeLvrInIntlPosn_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.CemCem_Lin1Fr06_CEM_LIN1.cemcem_lin1fr06_cem_lin1.WshngCycActv_CEM_LIN1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_WiperSpeed_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_AfterRSWipeCounter_mg due to assignment
      Cannot set rb_tunnelWipeActive_g due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="5" name="LightFunction" canonical="" mangled="LightFunction" class_member="FALSE" testable="TRUE" complexity="14">
    <listing_start>729</listing_start>
    <listing_end>830</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; (byte)1</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; (byte)0</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="12">
          <text>
            <line>(12) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; (byte)2</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="13">
          <text>
            <line>(13) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; (byte)4</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if ((uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MAX&gt;&gt;
-- Values at different branches: (5)-&gt;not equal to 1 (9)-&gt; 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Conflict: Unable to validate expression-to-expression comparison in branch 9
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4 'equal to' and 'not equal to' same value in branches 5/9
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:138
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
-- Values at different branches: (7)-&gt; 0 (8)-&gt;not equal to 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6 'equal to' and 'not equal to' same value in branches 7/8
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:0
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set rb_TempLightOn_l due to assignment
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="10">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set rb_TempLightOn_l due to assignment
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="11">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Cannot set rb_TempLightOn_l due to assignment
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="12">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MIN&gt;&gt;
-- Values at different branches: (1)-&gt;less than or equal to 0 (3)-&gt; 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg 'equal to' and 'not equal to' same value in branches 1/3
      Cannot set rb_TempLightOn_l due to assignment
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="13">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_AnyErrorCounterDebounce_mg &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
    <test_path index="14">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((((((((((((rw_SPINoCommCounter_g &gt; (0) || get_rb_LightVetoCounter_g() &gt; 0) || get_rb_LightSignalErrorCnt_g() &gt; 0) || rb_ASIC_SPI_ErrorCodeCnt_g &gt; 0) || rb_StaticNoValidAD_cnt_g &gt; 0) || get_rb_VDD_LightSignalErrorCnt_g() &gt; 0) || get_rb_LEDx_LStop_error_cnt_g() &gt; 0) || rb_ClockFreq_Error_cnt_g &gt; 0) 
|| rb_ASIC_ALSx_ShortDetected_cnt_g != 0) || rb_ASIC_initTimeout_g &gt; 0) || rb_VIref_ErrCnt_g &gt; 0) &gt; 0 || rb_Err_State_Light_Sens_mg &gt; 0) || (uF_VoltageStatus_g.Bit).B0 == 1) || (uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (((uF_modi_lightsens_g.AllBit &amp; 0x2f) &gt; 0 || (uF_Main_Flags_g.Bit).B7 &gt; 0) || (uF_LightInternalStatus_g.Bit).B6 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x1) &gt; 0 == 1 &amp;&amp; (uF_LightInternalStatus_g.Bit).B4 == 1 || (uF_modi_lightsens_g.Bit).B4 == 1 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x2) &gt; 0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rb_AnyErrorCounterDebounce_l == 0 &amp;&amp; get_rb_LightVetoCounter_g() == 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if ((uF_Main_Flags_g.Bit).B6 == 0 &amp;&amp; ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x8a || (EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) &amp;&amp; rb_TempLightOn_l &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="14">
          <text>
            <line>(14) case (uF_modi_lightsens_g.AllBit &amp; 0xf) ==&gt; default</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B7:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.Bit.B4:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_AnyErrorCounterDebounce_mg:1
TEST.VALUE:uut_prototype_stubs.get_rb_LightVetoCounter_g.return:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RlsmCem_Lin1Fr01_CEM_LIN1.rlsmcem_lin1fr01_cem_lin1.OutdBriSts_CEM_LIN1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Unable to validate expression-to-expression comparison in branch 4
      Conflict: Unable to validate expression-to-expression comparison in branch 5
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 10
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 11
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 12
      Cannot set switch condition (uF_modi_lightsens_g.AllBit &amp; 0xf) in branch 13
</notes>
    </test_path>
  </subprogram>
  <subprogram index="6" name="Humidity_Function" canonical="" mangled="Humidity_Function" class_member="FALSE" testable="TRUE" complexity="12">
    <listing_start>831</listing_start>
    <listing_end>921</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:685
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:685
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:0
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:685
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:685
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:685
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
-- Values at different branches: (5)-&gt;greater than or equal to 685 and less than or equal to 17185 (7)-&gt; 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:685
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Cannot resolve multiple comparisons ( G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g ) in branches 5/7
</notes>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_Temperature_raw_g &gt; (0x4321)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rw_Temperature_raw_g &lt; (0x2ad)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_Temperature_raw_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if ((rw_Temperature_Scheibe_g - (685)) / (10) &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="9">
          <text>
            <line>(9) if (rw_DewPoint_g == (0)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="10">
          <text>
            <line>(10) if (rw_DewPoint_g &lt; (1650)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="11">
          <text>
            <line>(11) if (rb_Humidity_g == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Temperature_raw_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_DewPoint_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Humidity_g:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 8
</notes>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8 &amp;&amp; (rbi_HumTempComError_g &amp; 0x10) == 0x10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((rbi_HumTempComError_g &amp; 0x10) == 0x10) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>-- Values at different branches: (1)-&gt;not equal to 0 (2)-&gt; 0
-- Values at different branches: (1)-&gt;not equal to 0 (3)-&gt; 0
-- Values at different branches: (1)-&gt;not equal to 0 (4)-&gt; 0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:1
</script>
      <notes>      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g 'equal to' and 'not equal to' same value in branches 1/2
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g 'equal to' and 'not equal to' same value in branches 1/3
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g 'equal to' and 'not equal to' same value in branches 1/4
</notes>
    </test_path>
    <test_path index="10">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8 &amp;&amp; (rbi_HumTempComError_g &amp; 0x10) == 0x10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((rbi_HumTempComError_g &amp; 0x10) == 0x10) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:16
</script>
    </test_path>
    <test_path index="11">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8 &amp;&amp; (rbi_HumTempComError_g &amp; 0x10) == 0x10) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:8
</script>
    </test_path>
    <test_path index="12">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rbi_HumTempComError_g != 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((rbi_HumTempComError_g &amp; 0x8) == 0x8 &amp;&amp; (rbi_HumTempComError_g &amp; 0x10) == 0x10) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>-- Values at different subconditions:  8,  16
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g:8
</script>
      <notes>      Conflict: Multiple equality operators with different values (G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rbi_HumTempComError_g) in branch 2
</notes>
    </test_path>
  </subprogram>
  <subprogram index="7" name="StandByMode" canonical="" mangled="StandByMode" class_member="FALSE" testable="TRUE" complexity="5">
    <listing_start>922</listing_start>
    <listing_end>952</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((rb_Verglasun_ClosedDebounce_mg &gt; 100 || (uF_VoltageStatus_g.Bit).B2 == 1) || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_SCIFlags_mg.Bit).B4 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((rb_Verglasun_ClosedDebounce_mg &gt; 100 || (uF_VoltageStatus_g.Bit).B2 == 1) || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_SCIFlags_mg.Bit).B4 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((rb_Verglasun_ClosedDebounce_mg &gt; 100 || (uF_VoltageStatus_g.Bit).B2 == 1) || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_SCIFlags_mg.Bit).B4 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:1
-- Values at different branches: (1)-&gt;less than or equal to 6000 (4)-&gt;greater than 6000
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg 'less than' and 'greater than' same value in branches 1/4
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((rb_Verglasun_ClosedDebounce_mg &gt; 100 || (uF_VoltageStatus_g.Bit).B2 == 1) || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B0 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_SCIFlags_mg.Bit).B4 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B4:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((rb_Verglasun_ClosedDebounce_mg &gt; 100 || (uF_VoltageStatus_g.Bit).B2 == 1) || rw_CommandCloseWindowTimout_mg &gt; (6000)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_SCIFlags_mg.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_SCIFlags_mg.Bit).B4 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Verglasun_ClosedDebounce_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_CommandCloseWindowTimout_mg:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_SCIFlags_mg.Bit.B0:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set (uF_SCIFlags_mg.Bit).B4 due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="8" name="VoltageDetect" canonical="" mangled="VoltageDetect" class_member="FALSE" testable="TRUE" complexity="5">
    <listing_start>953</listing_start>
    <listing_end>986</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:1
</script>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>-- Values at different branches: (1)-&gt;not equal to 1 (3)-&gt; 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0 'equal to' and 'not equal to' same value in branches 1/3
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_underVoltageTimer_s &gt; 249) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>-- Values at different branches: (1)-&gt; 1 (3)-&gt;not equal to 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_underVoltageTimer_s in branch 2
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0 'equal to' and 'not equal to' same value in branches 1/3
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_underVoltageTimer_s &gt; 249) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_VoltageStatus_g.Bit).B0 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if ((uF_VoltageStatus_g.Bit).B3 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>-- Values at different branches: (1)-&gt; 1 (3)-&gt;not equal to 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B3:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_underVoltageTimer_s in branch 2
      Conflict: Trying to set variable G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_VoltageStatus_g.Bit.B0 'equal to' and 'not equal to' same value in branches 1/3
</notes>
    </test_path>
  </subprogram>
  <subprogram index="9" name="TemperatureDetect" canonical="" mangled="TemperatureDetect" class_member="FALSE" testable="TRUE" complexity="5">
    <listing_start>994</listing_start>
    <listing_end>1030</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 62 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (367)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 63 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (485)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_InternalTemperature_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.ras_ASIC_MUX_MeasAD_g[3].avg:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 62 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (367)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 63 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (485)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_overTemperatureTimer_s &gt; (10000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_InternalTemperature_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.ras_ASIC_MUX_MeasAD_g[3].avg:1
</script>
      <notes>      Cannot set local variable rb_overTemperatureTimer_s in branch 4
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 62 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (367)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 63 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (485)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_overTemperatureTimer_s &gt; (10000)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_InternalTemperature_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.ras_ASIC_MUX_MeasAD_g[3].avg:1
</script>
      <notes>      Cannot set local variable rb_overTemperatureTimer_s in branch 4
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 62 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (367)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_overTemperatureTimer_s &gt; (10000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_InternalTemperature_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.ras_ASIC_MUX_MeasAD_g[3].avg:1
</script>
      <notes>      Cannot set local variable rb_overTemperatureTimer_s in branch 2
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_InternalTemperature_g &gt; 0 &amp;&amp; rb_InternalTemperature_g &lt; 62 || ((ras_ASIC_MUX_MeasAD_g)[3]).avg &gt; (0) &amp;&amp; ((ras_ASIC_MUX_MeasAD_g)[3]).avg &lt; (367)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_overTemperatureTimer_s &gt; (10000)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_InternalTemperature_g:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.ras_ASIC_MUX_MeasAD_g[3].avg:1
</script>
      <notes>      Cannot set local variable rb_overTemperatureTimer_s in branch 2
</notes>
    </test_path>
  </subprogram>
  <subprogram index="10" name="OutPutHudSendCount" canonical="" mangled="OutPutHudSendCount" class_member="FALSE" testable="TRUE" complexity="2">
    <listing_start>1031</listing_start>
    <listing_end>1045</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_HUD_Cnt_s &lt; 15) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <notes>      Cannot set local variable rb_HUD_Cnt_s in branch 1
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_HUD_Cnt_s &lt; 15) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <notes>      Cannot set local variable rb_HUD_Cnt_s in branch 1
</notes>
    </test_path>
  </subprogram>
  <subprogram index="11" name="OutPutHudValue" canonical="" mangled="OutPutHudValue" class_member="FALSE" testable="TRUE" complexity="3">
    <listing_start>1046</listing_start>
    <listing_end>1082</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_hud_Brightness_l &gt;= rl_eeprom_hud_max_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rl_hud_Brightness_l &gt; (126000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <notes>      Cannot set return value of function CalcHUDMean_1000ms in branch 1
      Cannot set rl_eeprom_hud_max_l due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_hud_Brightness_l &gt;= rl_eeprom_hud_max_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rl_hud_Brightness_l &gt; (126000)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <notes>      Cannot set return value of function CalcHUDMean_1000ms in branch 1
      Cannot set rl_eeprom_hud_max_l due to assignment
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_hud_Brightness_l &gt;= rl_eeprom_hud_max_l) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rl_hud_Brightness_l &gt; (126000)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <notes>      Cannot set return value of function CalcHUDMean_1000ms in branch 1
      Cannot set rl_eeprom_hud_max_l due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="12" name="OutPutTwliBriValue" canonical="" mangled="OutPutTwliBriValue" class_member="FALSE" testable="TRUE" complexity="2">
    <listing_start>1083</listing_start>
    <listing_end>1095</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (get_rw_Amb_light16bit_g() * (20) &lt; (16383)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (get_rw_Amb_light16bit_g() * (20) &lt; (16383)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
</notes>
    </test_path>
  </subprogram>
  <subprogram index="13" name="OutPutSolarValue" canonical="" mangled="OutPutSolarValue" class_member="FALSE" testable="TRUE" complexity="9">
    <listing_start>1096</listing_start>
    <listing_end>1156</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="8">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
-- Values at different branches: (3)-&gt;greater than G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g (6)-&gt;less than G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Conflict: Trying to set variable  'less than' and 'greater than' same value in branches 3/6
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
    <test_path index="9">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x2) &gt; 0 == 1 &amp;&amp; 1 == (uF_ASIC_ControlFlags_g.Bit).B2) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor1 &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_2_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rw_IrLightforSOSE_Corr1_l &gt; rw_Solar_light16bit_1_g) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if ((EEPROM_Struct_AD.EEPROMStructAD).SolarShadowCorrFactor2 &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Le_l &amp;&amp; rw_IrLightforSOSE_Corr2_l &gt;= rw_SoSe_SunInt_2D_Re_l) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="7">
          <text>
            <line>(7) if (rw_SoSe_SunInt_2D_Le_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="8">
          <text>
            <line>(8) if (rw_SoSe_SunInt_2D_Re_l &gt; (240)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor1:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_1_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_AD.EEPROMStructAD.SolarShadowCorrFactor2:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rw_Solar_light16bit_2_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rw_SoSe_SunInt_2D_Le_l due to assignment
      Cannot set rw_SoSe_SunInt_2D_Re_l due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="14" name="OutPutBrightnessValue" canonical="" mangled="OutPutBrightnessValue" class_member="FALSE" testable="TRUE" complexity="5">
    <listing_start>1157</listing_start>
    <listing_end>1209</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_ASIC_ControlFlags_g.Bit).B1 == 0 || (uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_ASIC_ControlFlags_g.Bit).B1 == 0 || (uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_Err_State_Light_Sens_mg == 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_Err_State_Light_Sens_mg:1
</script>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_ASIC_ControlFlags_g.Bit).B1 == 0 || (uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags == 0x98) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:152
</script>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_ASIC_ControlFlags_g.Bit).B1 == 0 || (uF_Main_Flags_g.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_InitLightValCnt_l &lt; 100) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
      <notes>      Cannot set local variable rb_InitLightValCnt_l in branch 2
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_ASIC_ControlFlags_g.Bit).B1 == 0 || (uF_Main_Flags_g.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_InitLightValCnt_l &lt; 100) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_ControlFlags_g.Bit.B1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
      <notes>      Cannot set local variable rb_InitLightValCnt_l in branch 2
</notes>
    </test_path>
  </subprogram>
  <subprogram index="15" name="CheckErrors" canonical="" mangled="CheckErrors" class_member="FALSE" testable="TRUE" complexity="4">
    <listing_start>1211</listing_start>
    <listing_end>1277</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (1 == ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x1) &amp;&amp; 0 == ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((((rb_RS_LS_Error1_g != 0 || rb_RS_LS_Error2_g != 0) || rb_LightS_Error1_g != 0) || (uF_E2ConfigErrorFlags_g.Bit).B6 != 0) || (uF_LIN_DiagReq2_mg.Bit).B1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_ASIC_Error_Flags_g.Bit).B0 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_E2ConfigErrorFlags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LIN_DiagReq2_mg.Bit.B1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_Error_Flags_g.Bit.B0:0
</script>
      <notes>      Cannot set rb_RS_LS_Error1_g due to assignment
      Cannot set rb_RS_LS_Error2_g due to assignment
      Cannot set rb_LightS_Error1_g due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (1 == ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x1) &amp;&amp; 0 == ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((((rb_RS_LS_Error1_g != 0 || rb_RS_LS_Error2_g != 0) || rb_LightS_Error1_g != 0) || (uF_E2ConfigErrorFlags_g.Bit).B6 != 0) || (uF_LIN_DiagReq2_mg.Bit).B1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_ASIC_Error_Flags_g.Bit).B0 != 0) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_E2ConfigErrorFlags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LIN_DiagReq2_mg.Bit.B1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_Error_Flags_g.Bit.B0:1
</script>
      <notes>      Cannot set rb_RS_LS_Error1_g due to assignment
      Cannot set rb_RS_LS_Error2_g due to assignment
      Cannot set rb_LightS_Error1_g due to assignment
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (1 == ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x1) &amp;&amp; 0 == ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((((rb_RS_LS_Error1_g != 0 || rb_RS_LS_Error2_g != 0) || rb_LightS_Error1_g != 0) || (uF_E2ConfigErrorFlags_g.Bit).B6 != 0) || (uF_LIN_DiagReq2_mg.Bit).B1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_ASIC_Error_Flags_g.Bit).B0 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_E2ConfigErrorFlags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LIN_DiagReq2_mg.Bit.B1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_Error_Flags_g.Bit.B0:0
</script>
      <notes>      Cannot set rb_RS_LS_Error1_g due to assignment
      Cannot set rb_RS_LS_Error2_g due to assignment
      Cannot set rb_LightS_Error1_g due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (1 == ((EEPROM_Struct_PD.EEPROMStructPD).RSControlFlags &amp; 0x1) &amp;&amp; 0 == ((EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte0_g &amp; 0x40) &gt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((((rb_RS_LS_Error1_g != 0 || rb_RS_LS_Error2_g != 0) || rb_LightS_Error1_g != 0) || (uF_E2ConfigErrorFlags_g.Bit).B6 != 0) || (uF_LIN_DiagReq2_mg.Bit).B1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((uF_ASIC_Error_Flags_g.Bit).B0 != 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.EEPROM_Struct_PD.EEPROMStructPD.RSControlFlags:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_E2ConfigErrorFlags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LIN_DiagReq2_mg.Bit.B1:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_ASIC_Error_Flags_g.Bit.B0:0
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 1
      Cannot set rb_RS_LS_Error1_g due to assignment
      Cannot set rb_RS_LS_Error2_g due to assignment
      Cannot set rb_LightS_Error1_g due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="16" name="ApplLinInit" canonical="" mangled="ApplLinInit" class_member="FALSE" testable="TRUE" complexity="2">
    <listing_start>1278</listing_start>
    <listing_end>1311</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) while (rb_Index_l &lt; 8) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.ApplLinInit.rb_LIN_State_l:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_Index_l due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) while (rb_Index_l &lt; 8) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.ApplLinInit.rb_LIN_State_l:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_Index_l due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="17" name="ApplLinSlavePreCopy" canonical="" mangled="ApplLinSlavePreCopy" class_member="FALSE" testable="TRUE" complexity="2">
    <listing_start>1312</listing_start>
    <listing_end>1321</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_MessageID_l == ((EEPROM_Struct_PD.EEPROMStructPD).IDRLSs_01 &amp; 0x3f)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.ApplLinSlavePreCopy.rb_MessageID_l:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set variable to unknown value in branch 1
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_MessageID_l == ((EEPROM_Struct_PD.EEPROMStructPD).IDRLSs_01 &amp; 0x3f)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.ApplLinSlavePreCopy.rb_MessageID_l:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set variable to unknown value in branch 1
</notes>
    </test_path>
  </subprogram>
  <subprogram index="18" name="GetFiveTableValue_500ms" canonical="" mangled="GetFiveTableValue_500ms" class_member="FALSE" testable="TRUE" complexity="3">
    <listing_start>1323</listing_start>
    <listing_end>1342</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_500ms.rl_HUD_Brightness_50ms:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 10) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_k_cycleIn500ms &gt;= 2) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_500ms.rl_HUD_Brightness_50ms:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
      Cannot set rb_k_cycleIn500ms due to assignment
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 10) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_k_cycleIn500ms &gt;= 2) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_500ms.rl_HUD_Brightness_50ms:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
      Cannot set rb_k_cycleIn500ms due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="19" name="AdjustOutHudValue" canonical="" mangled="AdjustOutHudValue" class_member="FALSE" testable="TRUE" complexity="5">
    <listing_start>1343</listing_start>
    <listing_end>1375</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_CurrentHud &gt;= (100)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.AdjustOutHudValue.rl_CurrentHud:&lt;&lt;MAX&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_CurrentHud &gt;= (100)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rw_LastCurrDiff &gt;= -15 &amp;&amp; rw_LastCurrDiff &lt;= 15) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.AdjustOutHudValue.rl_CurrentHud:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_LastCurrDiff due to assignment
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_CurrentHud &gt;= (100)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rw_LastCurrDiff &gt;= -15 &amp;&amp; rw_LastCurrDiff &lt;= 15) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (currLevel &lt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (currLevel &gt; 9) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.AdjustOutHudValue.rl_CurrentHud:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_LastCurrDiff due to assignment
      Cannot set currLevel due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_CurrentHud &gt;= (100)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rw_LastCurrDiff &gt;= -15 &amp;&amp; rw_LastCurrDiff &lt;= 15) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (currLevel &lt; 0) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (currLevel &gt; 9) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.AdjustOutHudValue.rl_CurrentHud:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_LastCurrDiff due to assignment
      Cannot set currLevel due to assignment
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rl_CurrentHud &gt;= (100)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rw_LastCurrDiff &gt;= -15 &amp;&amp; rw_LastCurrDiff &lt;= 15) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (currLevel &lt; 0) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.AdjustOutHudValue.rl_CurrentHud:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rw_LastCurrDiff due to assignment
      Cannot set currLevel due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="20" name="GetUpdateTimeForLightStatus" canonical="" mangled="GetUpdateTimeForLightStatus" class_member="FALSE" testable="TRUE" complexity="6">
    <listing_start>1376</listing_start>
    <listing_end>1415</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (uF_modi_lightsens_g.AllBit &amp; (byte)2) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (uF_modi_lightsens_g.AllBit &amp; (byte)4) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (uF_modi_lightsens_g.AllBit &amp; (byte)1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit:0
</script>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (uF_modi_lightsens_g.AllBit &amp; (byte)2) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (uF_modi_lightsens_g.AllBit &amp; (byte)4) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (uF_modi_lightsens_g.AllBit &amp; (byte)1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
-- Values at different branches: (2)-&gt; 0 (5)-&gt; 1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit:0
</script>
      <notes>      Conflict: Multiple equality operators with different values (G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit) in branches 2/5
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (uF_modi_lightsens_g.AllBit &amp; (byte)2) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (uF_modi_lightsens_g.AllBit &amp; (byte)4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
-- Values at different branches: (2)-&gt; 0 (3)-&gt; 4
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Multiple equality operators with different values (G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit) in branches 2/3
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (uF_modi_lightsens_g.AllBit &amp; (byte)2) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (uF_modi_lightsens_g.AllBit &amp; (byte)4) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_speed_in_kmh_g &gt;= 10) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
-- Values at different branches: (2)-&gt; 0 (3)-&gt; 4
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Multiple equality operators with different values (G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit) in branches 2/3
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if ((uF_LightInternalStatus_g.Bit).B0 == 1 &amp;&amp; (uF_Main_Flags_g.Bit).B6 == 0) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (uF_modi_lightsens_g.AllBit &amp; (byte)2) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_LightInternalStatus_g.Bit.B0:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_modi_lightsens_g.AllBit:2
</script>
    </test_path>
  </subprogram>
  <subprogram index="21" name="CalcHUDMean_1000ms" canonical="" mangled="CalcHUDMean_1000ms" class_member="FALSE" testable="TRUE" complexity="5">
    <listing_start>1416</listing_start>
    <listing_end>1441</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_hud_data_update == 1) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_hud_data_update:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_hud_data_update == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (RW_Update_Time_Count &lt; rb_hud_refresh_time) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_hud_refresh_time == RW_Update_Time_Count) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_hud_data_update:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Update_Time_Count:&lt;&lt;MAX&gt;&gt;
</script>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_hud_data_update == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (RW_Update_Time_Count &lt; rb_hud_refresh_time) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_hud_refresh_time == RW_Update_Time_Count) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_hud_data_update:1
-- Values at different branches: (2)-&gt;greater than or equal to GetUpdateTimeForLightStatus (4)-&gt; 
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Update_Time_Count:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Cannot resolve multiple comparisons ( G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Update_Time_Count ) in branches 2/4
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_hud_data_update == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (RW_Update_Time_Count &lt; rb_hud_refresh_time) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rl_current_hud_lux &lt; (100) &amp;&amp; RW_Amb_Fw_Result_End &lt; (100)) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_hud_refresh_time == RW_Update_Time_Count) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_hud_data_update:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Update_Time_Count:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Amb_Fw_Result_End:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Cannot set rl_current_hud_lux due to assignment
      Cannot set return value of function GetUpdateTimeForLightStatus in branch 2
      Cannot set RW_Update_Time_Count due to assignment
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_hud_data_update == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (RW_Update_Time_Count &lt; rb_hud_refresh_time) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rl_current_hud_lux &lt; (100) &amp;&amp; RW_Amb_Fw_Result_End &lt; (100)) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_hud_refresh_time == RW_Update_Time_Count) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_hud_data_update:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Update_Time_Count:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.RW_Amb_Fw_Result_End:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rl_current_hud_lux due to assignment
      Cannot set return value of function GetUpdateTimeForLightStatus in branch 2
      Cannot set RW_Update_Time_Count due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="22" name="orderHUDValue" canonical="" mangled="orderHUDValue" class_member="FALSE" testable="TRUE" complexity="4">
    <listing_start>1443</listing_start>
    <listing_end>1459</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; n) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.orderHUDValue.n:0
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; n) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (j &lt; n - i) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.orderHUDValue.n:1
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 2
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; n) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (j &lt; n - i) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rb_storeHUDValueEvery500ms)[j - 1] &gt; (rb_storeHUDValueEvery500ms)[j]) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.orderHUDValue.n:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_storeHUDValueEvery500ms[4294967295]:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_storeHUDValueEvery500ms[0]:&lt;&lt;MAX&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Cannot set j due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; n) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (j &lt; n - i) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rb_storeHUDValueEvery500ms)[j - 1] &gt; (rb_storeHUDValueEvery500ms)[j]) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.orderHUDValue.n:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_storeHUDValueEvery500ms[4294967295]:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_storeHUDValueEvery500ms[0]:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Cannot set j due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="23" name="GetFiveTableValue_50ms" canonical="" mangled="GetFiveTableValue_50ms" class_member="FALSE" testable="TRUE" complexity="4">
    <listing_start>1460</listing_start>
    <listing_end>1487</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 5) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Fw:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Amb:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 5) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (rb_count &lt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) for (rb_count &lt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Fw:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Amb:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Conflict: Unable to validate expression-to-expression comparison in branch 3
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 5) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (rb_count &lt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) for (rb_count &lt; 5) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Fw:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Amb:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Conflict: Unable to validate expression-to-expression comparison in branch 3
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_k_cycleIn50ms &gt;= 5) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (rb_count &lt; 5) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) for (rb_count &lt; 5) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Fw:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetFiveTableValue_50ms.Amb:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_k_cycleIn50ms due to assignment
      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Conflict: Unable to validate expression-to-expression comparison in branch 3
</notes>
    </test_path>
  </subprogram>
  <subprogram index="24" name="CRC8SAEJ1850" canonical="" mangled="CRC8SAEJ1850" class_member="FALSE" testable="TRUE" complexity="4">
    <listing_start>1507</listing_start>
    <listing_end>1532</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; u8_len) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_len:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_data:&lt;&lt;malloc 1&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; u8_len) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (j &lt; 8) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_len:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_data:&lt;&lt;malloc 1&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 2
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; u8_len) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (j &lt; 8) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (u8_crc8 &amp; 0x80) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_len:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_data:&lt;&lt;malloc 1&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Cannot set u8_crc8 due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) for (i &lt; u8_len) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) for (j &lt; 8) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (u8_crc8 &amp; 0x80) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_len:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.CRC8SAEJ1850.u8_data:&lt;&lt;malloc 1&gt;&gt;
</script>
      <notes>      Conflict: Unable to validate expression-to-expression comparison in branch 2
      Cannot set u8_crc8 due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="25" name="GetOutdBriStsCrcj1850" canonical="" mangled="GetOutdBriStsCrcj1850" class_member="FALSE" testable="TRUE" complexity="1">
    <listing_start>1533</listing_start>
    <listing_end>1540</listing_end>
    <test_path index="1"/>
    <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetOutdBriStsCrcj1850.OutdBriSts:&lt;&lt;MIN&gt;&gt;
</script>
  </subprogram>
  <subprogram index="26" name="GetHudCrcj1850" canonical="" mangled="GetHudCrcj1850" class_member="FALSE" testable="TRUE" complexity="1">
    <listing_start>1541</listing_start>
    <listing_end>1555</listing_end>
    <test_path index="1"/>
    <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetHudCrcj1850.hudSrc:&lt;&lt;MIN&gt;&gt;
</script>
  </subprogram>
  <subprogram index="27" name="GetLightTransmission" canonical="" mangled="GetLightTransmission" class_member="FALSE" testable="TRUE" complexity="7">
    <listing_start>1556</listing_start>
    <listing_end>1607</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_550nm_Transmission_local_Coding due to assignment
      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:1
</script>
      <notes>      Cannot set rb_550nm_Transmission_local_Coding due to assignment
      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set variable to unknown value in branch 6
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_550nm_Transmission_local_Coding due to assignment
      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
</notes>
    </test_path>
    <test_path index="5">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_550nm_Transmission_local_Coding due to assignment
      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
</notes>
    </test_path>
    <test_path index="6">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:91
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_550nm_Transmission_local_Coding due to assignment
      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
</notes>
    </test_path>
    <test_path index="7">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_550nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 100) ==&gt; TRUE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if (rb_880nm_Transmission_local_Coding &gt; 90 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 100) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if (rb_550nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_550nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="4">
          <text>
            <line>(4) if (rb_880nm_Transmission_local_Coding &gt;= 15 &amp;&amp; rb_880nm_Transmission_local_Coding &lt;= 90) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="5">
          <text>
            <line>(5) if (rb_550nm_Transmission_local_Coding_outOfRangeFlag == 1 || rb_880nm_Transmission_local_Coding_outOfRangeFlag == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="6">
          <text>
            <line>(6) if (((rb_550nm_Transmission_local_Coding_outOfRangeFlag == 0 &amp;&amp; rb_880nm_Transmission_local_Coding_outOfRangeFlag == 0) &amp;&amp; (EEPROM_Struct_PD.EEPROMStructPD).EEKodierbyte2_g != (rb_880nm_Transmission_local_Coding &lt;&lt; 4 | rb_550nm_Transmission_local_Coding)) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (
uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_550nm:91
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.GetLightTransmission.trans_880nm:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set rb_550nm_Transmission_local_Coding due to assignment
      Cannot set rb_880nm_Transmission_local_Coding due to assignment
      Cannot set rb_550nm_Transmission_local_Coding_outOfRangeFlag due to assignment
      Cannot set rb_880nm_Transmission_local_Coding_outOfRangeFlag due to assignment
</notes>
    </test_path>
  </subprogram>
  <subprogram index="28" name="Get_BCMVehType" canonical="" mangled="Get_BCMVehType" class_member="FALSE" testable="TRUE" complexity="4">
    <listing_start>1608</listing_start>
    <listing_end>1636</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_VehTypeValueDebounce &lt; 20) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Get_BCMVehType.CarType:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_VehTypeValueDebounce in branch 1
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_VehTypeValueDebounce &lt; 20) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_Main_Flags_g.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Get_BCMVehType.CarType:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_VehTypeValueDebounce in branch 1
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_VehTypeValueDebounce &lt; 20) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rb_BaseType &lt; 4 &amp;&amp; (rb_Kodierbyte1_Update_g &amp; 12) &gt;&gt; 2 != rb_BaseType) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Get_BCMVehType.CarType:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_VehTypeValueDebounce in branch 1
      Cannot set rb_BaseType due to assignment
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_VehTypeValueDebounce &lt; 20) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((rb_BaseType &lt; 4 &amp;&amp; (rb_Kodierbyte1_Update_g &amp; 12) &gt;&gt; 2 != rb_BaseType) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Get_BCMVehType.CarType:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_VehTypeValueDebounce in branch 1
      Cannot set rb_BaseType due to assignment
      Cannot set variable to unknown value in branch 3
</notes>
    </test_path>
  </subprogram>
  <subprogram index="29" name="Set_BCMLightOffset" canonical="" mangled="Set_BCMLightOffset" class_member="FALSE" testable="TRUE" complexity="4">
    <listing_start>1637</listing_start>
    <listing_end>1665</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_lightValueDebounce &lt; 20) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Set_BCMLightOffset.offset:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_lightValueDebounce in branch 1
</notes>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_lightValueDebounce &lt; 20) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_Main_Flags_g.Bit).B6 == 1) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Set_BCMLightOffset.offset:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_lightValueDebounce in branch 1
</notes>
    </test_path>
    <test_path index="3">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_lightValueDebounce &lt; 20) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((offset &lt; 8 &amp;&amp; rb_OldSensorLs != offset) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Set_BCMLightOffset.offset:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:1
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:&lt;&lt;MIN&gt;&gt;
</script>
      <notes>      Cannot set local variable rb_lightValueDebounce in branch 1
</notes>
    </test_path>
    <test_path index="4">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_lightValueDebounce &lt; 20) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="2">
          <text>
            <line>(2) if ((uF_Main_Flags_g.Bit).B6 == 1) ==&gt; FALSE</line>
          </text>
        </branch>
        <branch index="3">
          <text>
            <line>(3) if ((offset &lt; 8 &amp;&amp; rb_OldSensorLs != offset) &amp;&amp; ((uF_Main_Flags_g.Bit).B2 == 0 || (uF_Main_Flags_g.Bit).B1 == 1)) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B6:&lt;&lt;MIN&gt;&gt;
-- Values at different subconditions: less than 8, not equal to rb_OldSensorLs:
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.Set_BCMLightOffset.offset:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B2:0
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.uF_Main_Flags_g.Bit.B1:1
</script>
      <notes>      Cannot set local variable rb_lightValueDebounce in branch 1
      Conflict: Cannot resolve multiple comparisons ( G5_RLS_LIN_GEELY2DOT0.Set_BCMLightOffset.offset ) in branch 3
</notes>
    </test_path>
  </subprogram>
  <subprogram index="30" name="SendRLSSerNo" canonical="" mangled="SendRLSSerNo" class_member="FALSE" testable="TRUE" complexity="1">
    <listing_start>1666</listing_start>
    <listing_end>1673</listing_end>
    <test_path index="1"/>
  </subprogram>
  <subprogram index="31" name="SendRLSMPartNo" canonical="" mangled="SendRLSMPartNo" class_member="FALSE" testable="TRUE" complexity="1">
    <listing_start>1674</listing_start>
    <listing_end>1684</listing_end>
    <test_path index="1"/>
  </subprogram>
  <subprogram index="32" name="SendRLSMPartNo10" canonical="" mangled="SendRLSMPartNo10" class_member="FALSE" testable="TRUE" complexity="1">
    <listing_start>1685</listing_start>
    <listing_end>1696</listing_end>
    <test_path index="1"/>
  </subprogram>
  <subprogram index="33" name="WipeWinterModeCheck" canonical="" mangled="WipeWinterModeCheck" class_member="FALSE" testable="TRUE" complexity="2">
    <listing_start>1699</listing_start>
    <listing_end>1710</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_speed_in_kmh_g &lt; 5 &amp;&amp; rb_OutsideTemp_mg &lt;= 0) ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MAX&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_OutsideTemp_mg:&lt;&lt;MAX&gt;&gt;
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) if (rb_speed_in_kmh_g &lt; 5 &amp;&amp; rb_OutsideTemp_mg &lt;= 0) ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_speed_in_kmh_g:&lt;&lt;MIN&gt;&gt;
TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.&lt;&lt;GLOBAL&gt;&gt;.rb_OutsideTemp_mg:&lt;&lt;MIN&gt;&gt;
</script>
    </test_path>
  </subprogram>
  <subprogram index="34" name="IsByteOddParity" canonical="" mangled="IsByteOddParity" class_member="FALSE" testable="TRUE" complexity="2">
    <listing_start>1718</listing_start>
    <listing_end>1728</listing_end>
    <test_path index="1">
      <branches>
        <branch index="1">
          <text>
            <line>(1) while data ==&gt; FALSE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.IsByteOddParity.data:0
</script>
    </test_path>
    <test_path index="2">
      <branches>
        <branch index="1">
          <text>
            <line>(1) while data ==&gt; TRUE</line>
          </text>
        </branch>
      </branches>
      <script>TEST.VALUE:G5_RLS_LIN_GEELY2DOT0.IsByteOddParity.data:1
</script>
    </test_path>
  </subprogram>
</basis_paths>
